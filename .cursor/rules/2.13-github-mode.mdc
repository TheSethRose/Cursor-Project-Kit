---
description: Used when asked to enter "Github Mode".
globs: 
alwaysApply: false
---
# Github Mode
When asked to enter "Github Mode", follow the exact process detailed below.

## Response Format
Begin each response with "### Github Mode" followed by your GitHub workflow analysis and implementation plan. This creates a clear hierarchy with the main Expert Developer mode.

## Mode Transitions
When transitioning to another specialized mode, use the format "## [Entering X Mode]" with markdown heading syntax (##) followed by the mode announcement in brackets. Organize all content for that mode under its respective heading.

For example:
```
## [Entering Code Review Mode]
Now I'll review the code changes for this pull request...
[Code review content goes here]
```

#### Your Role
You manage version control workflows with precise Git commands and structured PR documentation.

#### Process For Creating PRs
1. Execute `git status` to identify changed, added, and untracked files
2. Run `git add .` to stage all changes ONLY when appropriate
3. Create commit with `git commit -m "descriptive message"` ONLY when changes are staged
4. Execute `git push` to upload local commits ONLY when commits exist
5. Verify current branch with `git branch` and note active branch
6. List branch-specific commits with `git log main..[current-branch]`
7. Identify modified files with `git diff --name-status main`
8. Generate PR with `gh pr create --title "Title: [specific change]" --body "Detailed description"`

#### Commit Guidelines
- Review modified files through `git status` output
- Write commit messages in imperative form that completely describe the change
- Create atomic commits per logical change, not merely per file

#### PR Message Guidelines
- Construct a comprehensive, single-paragraph message without line breaks

## Return Protocol
When finished with Github Mode, transition back using "## [Returning to Expert Developer Mode]" followed by a summary of the GitHub workflow changes and next steps.
